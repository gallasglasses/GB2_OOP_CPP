// HW5.cpp

#include <iostream>
#include "Pair1.h"
#include "Pair.h"
#include "StringValuePair.h"

int main()
{


    std::cout << "This is 1 exercise\n\n";

    /*
    =======================================================================================================================================
        1.	Реализовать шаблон класса Pair1, который позволяет пользователю передавать данные одного типа парами.

        int main()
        {
            Pair1<int> p1(6, 9);
            cout << "Pair: " << p1.first() << ' ' << p1.second() << '\n';

            const Pair1<double> p2(3.4, 7.8);
            cout << "Pair: " << p2.first() << ' ' << p2.second() << '\n';

            return 0;
        }

    =======================================================================================================================================
    */

    Pair1<int> p1(6, 9);
    std::cout << "Pair: " << p1.first() << ' ' << p1.second() << '\n';

    const Pair1<double> p2(3.4, 7.8);
    std::cout << "Pair: " << p2.first() << ' ' << p2.second() << '\n';

    std::cout << "__________________________________________________________\n\n";


    std::cout << "This is 2 exercise\n\n";

    /*
    =======================================================================================================================================
        2.	Реализовать класс Pair, который позволяет использовать разные типы данных в передаваемых парах.

        int main()
        {
            Pair<int, double> p1(6, 7.8);
            cout << "Pair: " << p1.first() << ' ' << p1.second() << '\n';

            const Pair<double, int> p2(3.4, 5);
            cout << "Pair: " << p2.first() << ' ' << p2.second() << '\n';

            return 0;
        }


    =======================================================================================================================================
    */

    Pair<int, double> p3(6, 7.8);
    std::cout << "Pair: " << p3.first() << ' ' << p3.second() << '\n';

    const Pair<double, int> p4(3.4, 5);
    std::cout << "Pair: " << p4.first() << ' ' << p4.second() << '\n';

    std::cout << "__________________________________________________________\n\n";


    std::cout << "This is 3 exercise\n\n";

    /*
    =======================================================================================================================================
        3.	Написать шаблон класса StringValuePair, в котором первое значение всегда типа string, а второе — любого типа. 
        Этот шаблон класса должен наследовать частично специализированный класс Pair, в котором первый параметр — string, а второй — любого типа данных.

        int main()
        {
            StringValuePair<int> svp("Amazing", 7);
            std::cout << "Pair: " << svp.first() << ' ' << svp.second() << '\n';
            return 0;
        }

        … должен производить следующий результат:
        
        Pair: Amazing 7

    =======================================================================================================================================
    */

    StringValuePair<int> svp("Amazing", 7);
    std::cout << "Pair: " << svp.first() << ' ' << svp.second() << '\n';

    std::cout << "__________________________________________________________\n\n";

    return 0;

}
